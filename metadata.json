{
  "name": "cloudwatch-logs",
  "description": "Installs and configures AWS CloudWatch Logs",
  "long_description": "# Description\n\nInstalls the CloudWatch Logs client and enables easy configuration of multiple\nlogs via attributes.\n\n## Supported OS\n\nCurrently all linux OS's are supported.\n\nOn Amazon Linux the yum package will be used.\n\n## Usage\n\nLogs are configured by appending to the `['cwlogs']['logfiles']` attribute from\nany recipe.  You can configure as many logs as needed.  Simply include the\ndefault cwlogs recipe in your runlist after all recipes which define a log.\n\nIf you do not want each chef run to risk pulling in the latest cloudwatch\ninstaller from AWS, then you can set the following attribute to `false`:\n\n```ruby\n['cwlogs']['attempt_upgrade'] = false\n```\n\n## Example\n\n```ruby\ndefault['cwlogs']['logfiles']['mysite-httpd_access'] = {\n  :log_stream_name  => '{instance_id}-{hostname}',\n  :log_group_name   => 'mysite-httpd_access-group',\n  :file             => '/var/log/httpd/mysite.com/access_log',\n  :datetime_format  => '%d/%b/%Y:%H:%M:%S %z',\n  :initial_position => 'end_of_file'\n}\n\ndefault['cwlogs']['logfiles']['mysite-httpd_error'] = {\n  :log_stream_name  => '{instance_id}-{hostname}',\n  :log_group_name   => 'mysite-httpd_error-group',\n  :file             => '/var/log/httpd/mysite.com/error_log',\n  :datetime_format  => '%d/%b/%Y:%H:%M:%S %z',\n  :initial_position => 'end_of_file'\n}\n\ndefault['cwlogs']['logfiles']['mysite-mod_security_log'] = {\n  :log_stream_name          => '{instance_id}-{hostname}',\n  :log_group_name           => 'mysite-mod_security_log',\n  :file                     => '/var/log/modsec_audit.log',\n  :datetime_format          => '[%d/%b/%Y:%H:%M:%S %z]',\n  :multi_line_start_pattern => '^--([0-9a-fA-F]*){8}-[A]{1}--',\n  :initial_position         => 'end_of_file'\n}\n```\n\nFrom any attributes file will generate the following CloudWatch Logs config:\n\n```ini\n[mysite-httpd_access]\nlog_stream_name = {instance_id}-{hostname}\nlog_group_name = mysite-httpd_access-group\nfile = /var/log/httpd/mysite.com/access_log\ndatetime_format = %d/%b/%Y:%H:%M:%S %z\ninitial_position = end_of_file\n\n[mysite-httpd_error]\nlog_stream_name = {instance_id}-{hostname}\nlog_group_name = mysite-httpd_error-group\nfile = /var/log/httpd/mysite.com/error_log\ndatetime_format = %d/%b/%Y:%H:%M:%S %z\ninitial_position = end_of_file\n\n[mysite-mod_security_log]\nlog_stream_name = {instance_id}-{hostname}\nlog_group_name = mysite-mod_security_log\nfile = /var/log/modsec_audit.log\ndatetime_format = [%d/%b/%Y:%H:%M:%S %z]\nmulti_line_start_pattern = ^--([0-9a-fA-F]*){8}-[A]{1}--\ninitial_position = end_of_file\n```\n\nAll hash elements will pass through to the config file, so for example you can\nuse `encoding` or any other supported config element.\n\n> See the [AWS CloudWatch Logs configuration reference][1] for details.\n\n[1]: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/AgentReference.html\n",
  "maintainer": "Ben Bridts",
  "maintainer_email": "ben@cloudar.be",
  "license": "FreeBSD",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "amazon": ">= 0.0.0"
  },
  "dependencies": {

  },
  "recommendations": {

  },
  "suggestions": {

  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {

  },
  "version": "0.0.6",
  "source_url": "",
  "issues_url": "",
  "privacy": false,
  "chef_versions": [

  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
